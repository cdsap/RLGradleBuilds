name: 'Experiment Report'
description: 'Generates and archives reports comparing Develocity builds for an experiment.'

inputs:
  api-key:
    description: 'API key for accessing Develocity services'
    required: true
  task:
    description: 'The task used in the experiment'
    required: true
  experiment-id:
    description: 'Unique identifier for the experiment'
    required: true
  tags:
    description: 'Comma-separated tags to filter the builds for comparison'
    required: true
  gh_token:
    description: 'GitHub token for authentication'
    required: true
  repository:
    description: 'GitHub repository to check out'
    required: true
  run_id:
    description: 'Run ID'
    required: false
  mode:
    description: 'Mode of the experiment'
    required: false
  rl-agent-url:
    description: 'URL of the RL agent for sending feedback'
    required: false
    default: ""
  send-feedback:
    description: 'Whether to send feedback to RL agent'
    required: false
    default: "false"
  firebase-function-url:
    description: 'URL of the Firebase function for updating experiment status'
    required: false
    default: "https://us-central1-rlgradleld.cloudfunctions.net"
  rl-actions:
    description: 'RL-generated action parameters (JSON string)'
    required: false
    default: '{}'

outputs:
  mean_build_duration:
    description: 'Mean build duration in milliseconds'
  gradle_gc_time:
    description: 'Gradle process garbage collection time'
  kotlin_gc_time:
    description: 'Kotlin process garbage collection time'
  kotlin_compile_duration:
    description: 'Kotlin compile task duration in milliseconds'

runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 17

    - name: Execute CompareGEBuilds
      id: compareBuilds
      run: |
        # Download and set permissions for the CompareGEBuilds binary
        curl -L https://github.com/cdsap/CompareGEBuilds/releases/download/v1.0.3/build-experiment-results --output build-experiment-results
        chmod 0757 build-experiment-results

        # Parse and format tags input into the required format
        tags="${{ inputs.tags }}"
        
        # Execute the comparison with the appropriate arguments
        URL="${{ inputs.url }}"
        MAX_BUILDS="50"
        REPOSITORY="${{ inputs.repository }}"
        EXPERIMENT_ID="${{ inputs.experiment-id }}"
        API_KEY="${{ inputs.api-key }}"
        RUN_ID="${{ inputs.run_id }}"
        
        # Create a unique variant ID for this specific action (for build comparison only)
        variant_id="${{ inputs.experiment-id }}_W${{ fromJson(inputs.rl-actions).max_workers }}_G${{ fromJson(inputs.rl-actions).gradle_heap_gb }}_K${{ fromJson(inputs.rl-actions).kotlin_heap_gb }}"
        
        echo "Using experiment ID: $EXPERIMENT_ID"
        echo "Using variant ID: $variant_id"
        echo "--variants=$variant_id" 
        ./build-experiment-results --url="$URL" \
                --api-key="$API_KEY" \
                --process-report \
                --variants=$variant_id
        
        cat $(ls -t experiment_results_*.csv | head -n 1)
        
        # Extract specific metrics from the CSV file
        CSV_FILE=$(ls -t experiment_results_*.csv | head -n 1)
        
        # Extract metrics using awk
        MEAN_BUILD_DURATION=$(awk -F',' '$1 == "Build" && $2 == "Build time" {print $3}' "$CSV_FILE")
        GRADLE_GC_TIME=$(awk -F',' '$1 == "Gradle process state" && $2 == "Gradle-Process-gcTime" {print $3}' "$CSV_FILE")
        KOTLIN_GC_TIME=$(awk -F',' '$1 == "Kotlin process state" && $2 == "Kotlin-Process-gcTime" {print $3}' "$CSV_FILE")
        KOTLIN_COMPILE_DURATION=$(awk -F',' '$1 == "Task Type" && $2 == "org.jetbrains.kotlin.gradle.tasks.KotlinCompile" {print $3}' "$CSV_FILE")
        
        # Output metrics as GitHub Actions outputs
        echo "mean_build_duration=$MEAN_BUILD_DURATION" >> $GITHUB_OUTPUT
        echo "gradle_gc_time=$GRADLE_GC_TIME" >> $GITHUB_OUTPUT
        echo "kotlin_gc_time=$KOTLIN_GC_TIME" >> $GITHUB_OUTPUT
        echo "kotlin_compile_duration=$KOTLIN_COMPILE_DURATION" >> $GITHUB_OUTPUT
        
        # Also print for debugging
        echo "Extracted Metrics:"
        echo "Mean Build Duration: ${MEAN_BUILD_DURATION} ms"
        echo "Gradle GC Time: ${GRADLE_GC_TIME}"
        echo "Kotlin GC Time: ${KOTLIN_GC_TIME}"
        echo "Kotlin Compile Duration: ${KOTLIN_COMPILE_DURATION} ms"
        
        # Send feedback to RL agent if enabled
        if [ "${{ inputs.send-feedback }}" == "true" ] && [ -n "${{ inputs.rl-agent-url }}" ]; then
          echo "Sending feedback to RL agent..."
          echo "Using experiment ID for RL agent: $EXPERIMENT_ID"
          curl -X POST "${{ inputs.rl-agent-url }}/send-feedback" \
            -H "Content-Type: application/json" \
            -d "{
              \"experiment_id\": \"$EXPERIMENT_ID\",
              \"build_time\": ${MEAN_BUILD_DURATION},
              \"gradle_gc_time\": ${GRADLE_GC_TIME},
              \"kotlin_gc_time\": ${KOTLIN_GC_TIME},
              \"kotlin_compile_duration\": ${KOTLIN_COMPILE_DURATION},
              \"state\": {
                \"repository\": \"${{ inputs.repository }}\",
                \"task\": \"${{ inputs.task }}\",
                \"mode\": \"${{ inputs.mode }}\",
                \"run_id\": \"${{ inputs.run_id }}\"
              }
            }"
          echo "Feedback sent successfully"
        else
          echo "Skipping feedback to RL agent (disabled or no URL provided)"
        fi

        echo "Final experiment ID being used: $EXPERIMENT_ID"
        
        # Update experiment status in Firestore
        if [ -n "${{ inputs.firebase-function-url }}" ]; then
          echo "Updating experiment status in Firestore..."
          echo "Using experiment ID for Firebase: $EXPERIMENT_ID"
          curl -X POST "${{ inputs.firebase-function-url }}/updateExperimentStatusData" \
            -H "Content-Type: application/json" \
            -d "{
              \"experiment_id\": \"$EXPERIMENT_ID\",
              \"status\": \"completed\",
              \"workflow_run_id\": \"${{ inputs.run_id }}\",
              \"build_time\": ${MEAN_BUILD_DURATION},
              \"gradle_gc_time\": ${GRADLE_GC_TIME},
              \"kotlin_gc_time\": ${KOTLIN_GC_TIME},
              \"kotlin_compile_duration\": ${KOTLIN_COMPILE_DURATION}
            }"
          echo "Experiment status updated in Firestore"
        else
          echo "Skipping Firestore update (no URL provided)"
        fi
                
      shell: bash
