name: 'Experiment Report'
description: 'Generates and archives reports comparing Develocity builds for an experiment.'

inputs:
  api-key:
    description: 'API key for accessing Develocity services'
    required: true
  url:
    description: 'URL of the Develocity server'
    required: true
  task:
    description: 'The task used in the experiment'
    required: true
  max-builds:
    description: 'Maximum number of builds to fetch for the comparison (default is 200)'
    required: false
    default: 200
  experiment-id:
    description: 'Unique identifier for the experiment'
    required: true
  tags:
    description: 'Comma-separated tags to filter the builds for comparison'
    required: true
  profile:
    description: 'Enable or disable profiling during the comparison'
    required: true
  gh_token:
    description: 'GitHub token for authentication'
    required: true
  taskpathreport:
    description: 'Enable or disable task path reporting'
    required: true
  processreport:
    description: 'Enable or disable process reporting'
    required: true
  kotlinreport:
    description: 'Enable or disable Kotlin build reporting'
    required: true
  tasktypereport:
    description: 'Enable or disable task type reporting'
    required: true
  resourceusagereport:
    description: 'Enable or disable resource usage reporting'
    required: true
  onlycacheableoutcome:
    description: 'Enable or disable reporting only for cacheable outcomes'
    required: true
  thresholdtaskduration:
    description: 'Threshold of task duration for the task path report'
    required: true
    default: 1000
  repository:
    description: 'GitHub repository to check out'
    required: true
  run_id:
    description: 'Run ID'
    required: false
  mode:
    description: 'Mode of the experiment'
    required: false
  experiment_title:
    description: 'Title of the experiment'
    required: false
  open-ai-request: 
    description: 'OpenAI request'
    required: true
    default: false
  open-ai-api-key:
    description: 'OpenAI API key'
    required: false
    default: ""
  deploy_results:
    description: 'Deploy results'
    required: true
    default: false
  deployment-key:
    description: 'Deployment key'
    required: true
    default: ""

outputs:
  mean_build_duration:
    description: 'Mean build duration in milliseconds'
  gradle_gc_time:
    description: 'Gradle process garbage collection time'
  kotlin_gc_time:
    description: 'Kotlin process garbage collection time'
  kotlin_compile_duration:
    description: 'Kotlin compile task duration in milliseconds'

runs:
  using: 'composite'
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 17

    - name: Execute CompareGEBuilds
      id: compareBuilds
      run: |
        # Download and set permissions for the CompareGEBuilds binary
        curl -L https://github.com/cdsap/CompareGEBuilds/releases/download/v1.0.3/build-experiment-results --output build-experiment-results
        chmod 0757 build-experiment-results

        # Parse and format tags input into the required format
        tags="${{ inputs.tags }}"
        arrayTags=(${tags//,/ })
        tagsParsed=""
        for val in "${arrayTags[@]}"; do
          tagsParsed="$tagsParsed --variants=$val"
        done

        # Set optional flags based on input values
        profile=""
        if [ "${{ inputs.profile }}" == "true" ]; then
          profile="--profile"
        fi

        taskpathreport="--task-path-report"
        if [ "${{ inputs.taskpathreport }}" == "false" ]; then
          taskpathreport="--no-task-path-report"
        fi

        processreport="--process-report"
        if [ "${{ inputs.processreport }}" == "false" ]; then
          processreport="--no-process-report"
        fi

        kotlinreport="--kotlin-build-report"
        if [ "${{ inputs.kotlinreport }}" == "false" ]; then
          kotlinreport="--no-kotlin-build-report"
        fi

        tasktypereport="--task-type-report"
        if [ "${{ inputs.tasktypereport }}" == "false" ]; then
          tasktypereport="--no-task-type-report"
        fi

        resourceusagereport="--resource-usage-report"
        if [ "${{ inputs.resourceusagereport }}" == "false" ]; then
          resourceusagereport="--no-resource-usage-report"
        fi

        onlycacheableoutcome="--only-cacheable-outcome"
        if [ "${{ inputs.onlycacheableoutcome }}" == "false" ]; then
          onlycacheableoutcome="--no-only-cacheable-outcome"
        fi

        gcreport="--gc-report"  
        if [ "${{ inputs.gcreport }}" == "false" ]; then
          gcreport="--no-gc-report"
        fi 

        if [ "${{ inputs.open-ai-request }}" == "true" ]; then
          openai_request="--open-ai-request"
        else
          openai_request="--no-open-ai-request"
        fi


        thresholdtaskduration="--threshold-task-duration ${{ inputs.thresholdtaskduration }}"

        # Execute the comparison with the appropriate arguments
        URL="${{ inputs.url }}"
        MAX_BUILDS="${{ inputs.max-builds }}"
        REPOSITORY="${{ inputs.repository }}"
        EXPERIMENT_ID="${{ inputs.experiment-id }}"
        RUN_ID="${{ inputs.run_id }}"
        API_KEY="${{ inputs.api-key }}"
  
    
        ./build-experiment-results --url="https://ge.solutions-team.gradle.com/" \
                --api-key="$API_KEY" \
                --process-report \
                $tagsParsed
        
        cat $(ls -t experiment_results_*.csv | head -n 1)
        
        # Extract specific metrics from the CSV file
        CSV_FILE=$(ls -t experiment_results_*.csv | head -n 1)
        
        # Extract metrics using awk
        MEAN_BUILD_DURATION=$(awk -F',' '$1 == "Build" && $2 == "Build time" {print $3}' "$CSV_FILE")
        GRADLE_GC_TIME=$(awk -F',' '$1 == "Gradle process state" && $2 == "Gradle-Process-gcTime" {print $3}' "$CSV_FILE")
        KOTLIN_GC_TIME=$(awk -F',' '$1 == "Kotlin process state" && $2 == "Kotlin-Process-gcTime" {print $3}' "$CSV_FILE")
        KOTLIN_COMPILE_DURATION=$(awk -F',' '$1 == "Task Type" && $2 == "org.jetbrains.kotlin.gradle.tasks.KotlinCompile" {print $3}' "$CSV_FILE")
        
        # Output metrics as GitHub Actions outputs
        echo "mean_build_duration=$MEAN_BUILD_DURATION" >> $GITHUB_OUTPUT
        echo "gradle_gc_time=$GRADLE_GC_TIME" >> $GITHUB_OUTPUT
        echo "kotlin_gc_time=$KOTLIN_GC_TIME" >> $GITHUB_OUTPUT
        echo "kotlin_compile_duration=$KOTLIN_COMPILE_DURATION" >> $GITHUB_OUTPUT
        
        # Also print for debugging
        echo "Extracted Metrics:"
        echo "Mean Build Duration: ${MEAN_BUILD_DURATION} ms"
        echo "Gradle GC Time: ${GRADLE_GC_TIME}"
        echo "Kotlin GC Time: ${KOTLIN_GC_TIME}"
        echo "Kotlin Compile Duration: ${KOTLIN_COMPILE_DURATION} ms"
                
      shell: bash
