name: Experiment

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "GitHub repository to run the experiment"
        required: true
        default: "cdsap/ExperimentGradle8.9"
      task:
        description: "Gradle task to be executed"
        required: true
        default: ":core:model:compileKotlin"
      iterations:
        description: "Number of iterations for the experiment"
        required: true
        default: "10"
      mode:
        description: "Type of execution relative to caching"
        type: choice
        required: true
        default: 'dependencies cache'
        options:
          - 'dependencies cache'
      java_args:
        description: "JDK vendor and version for each variant"
        type: string
        default: "{javaVersionVariantA:'17',javaVersionVariantB:'17',javaVendorVariantA:'zulu',javaVendorVariantB:'zulu'}"
        required: true
      extra_build_args:
        description: "Extra build arguments for each variant"
        type: string
        default: "{extraArgsVariantA:' ',extraArgsVariantB:' '}"
        required: true
      extra_report_args:
        description: "Configuration for generating reports"
        type: string
        default: "{deploy_results:'false',experiment_title:'', open_ai_request:'true', report_enabled:'true',tasktype_report:'true',taskpath_report:'true',kotlin_build_report:'false',process_report:'false',resource_usage_report:'true',gc_report:'false',only_cacheable_outcome:'false',threshold_task_duration:'1000'}"
        required: true
      variant:
        description: "Variant for the experiment"
        type: string
        default: "main"
        required: true
      experiment_id:
        description: "Experiment ID for RL tracking"
        required: false
        default: ""
      rl_actions:
        description: "RL-generated action parameters (JSON string)"
        required: false
        default: "{}"

run-name: "${{ github.event.inputs.repository }}-${{ github.event.inputs.mode }}-${{ github.event.inputs.variant }}-${{ github.event.inputs.task }}"

jobs:
  iterations:
    name: Generate Iterations
    runs-on: ubuntu-latest
    steps:
      - id: calculate_iterations
        run: |
          iterations="["
          for i in {1..${{ github.event.inputs.iterations }}}
          do
            if [ $i == 1 ]; then
              iterations="$iterations \"$i\""
            else
              iterations="$iterations, \"$i\""
            fi
          done
          iterations="$iterations ]"
          echo "iterations=$iterations" >> $GITHUB_OUTPUT
    outputs:
      iterations: ${{ steps.calculate_iterations.outputs.iterations }}

  seed:
    name: Seed Job
    if: github.event.inputs.mode != 'no caching'
    needs: [iterations]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/seed
        with:
          cache-exclude-script: "${{ env.cache_exclude_content }}"
          task: "${{ github.event.inputs.task }}"
          mode: "${{ github.event.inputs.mode }}"
          experiment-id: "${{ github.event.inputs.experiment_id }}"
          variant: ${{ github.event.inputs.variant }}
          api-key: ${{ secrets.DV_ACCESS_KEY }}
          repository: ${{ github.event.inputs.repository }}
          variant-prefix: 'experiment' 
          extra-args: ${{ fromJson(github.event.inputs.extra_build_args).extraArgsVariantA }}
          jdk_version: ${{ fromJson(github.event.inputs.java_args).javaVersionVariantA }}
          jdk_vendor: ${{ fromJson(github.event.inputs.java_args).javaVendorVariantA }}
          cache-url: ${{ secrets.CI_URL_CACHE_NODE }}
          rl-actions: "${{ github.event.inputs.rl_actions }}"
      - uses: actions/checkout@v4
    outputs:
      iterations: ${{ needs.iterations.outputs.iterations }}
      skip: ${{ github.event.inputs.mode == 'no caching' }}

  execution-caching:
    name: Execution with Caching
    if: github.event.inputs.mode != 'no caching'
    needs: [seed]
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        runs: ${{ fromJson(needs.seed.outputs.iterations) }}
    steps:
      - uses: actions/checkout@v4
      - name: Conditionally Wait for Seed Job
        if: ${{ github.event.inputs.mode != 'no caching' }}
        run: echo "Waiting for seed job to complete"
      - uses: ./.github/workflows/run
        with:
          task: "${{ github.event.inputs.task }}"
          mode: "${{ github.event.inputs.mode }}"
          experiment-id: "${{ github.event.inputs.experiment_id }}"
          execution-number: ${{ github.run_number }}
          variant: ${{ github.event.inputs.variant }}
          api-key: ${{ secrets.DV_ACCESS_KEY }}
          cache-excludes: ${{ steps.seed.outputs.cache-excludes }}
          cache-url: ${{ secrets.CI_URL_CACHE_NODE }}
          repository: ${{ github.event.inputs.repository }}
          variant-prefix: 'experiment'
          extra-args: ${{ fromJson(github.event.inputs.extra_build_args).extraArgsVariantA }}
          jdk_version: ${{ fromJson(github.event.inputs.java_args).javaVersionVariantA }}
          jdk_vendor: ${{ fromJson(github.event.inputs.java_args).javaVendorVariantA }}
          rl-actions: "${{ github.event.inputs.rl_actions }}"
      - uses: actions/checkout@v4



  report:
    permissions:
      contents: write
      actions: write
    name: Report with Caching
    if: fromJson(github.event.inputs.extra_report_args).report_enabled == 'true'
    runs-on: ubuntu-latest
    needs: [execution-caching]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/report
        with:
          task: "${{ github.event.inputs.task }}"
          experiment-id: "${{ github.event.inputs.experiment_id }}"
          tags: "${{ github.repository_owner }}-${{ github.run_number }}_experiment_${{ github.event.inputs.variant }}"
          api-key: ${{ secrets.DV_ACCESS_TOKEN }}
          url: ${{ secrets.DV_URL }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          profile: false
          mode: "${{ github.event.inputs.mode }}"
          repository: ${{ github.event.inputs.repository }}
          run_id: ${{ github.run_id }}
          experiment_title: ${{ fromJson(github.event.inputs.extra_report_args).experiment_title }}
          taskpathreport: ${{ fromJson(github.event.inputs.extra_report_args).taskpath_report }}
          tasktypereport: ${{ fromJson(github.event.inputs.extra_report_args).tasktype_report }}
          processreport: ${{ fromJson(github.event.inputs.extra_report_args).process_report }}
          gcreport: ${{ fromJson(github.event.inputs.extra_report_args).gc_report }}
          kotlinreport: ${{ fromJson(github.event.inputs.extra_report_args).kotlin_build_report }}
          resourceusagereport: ${{ fromJson(github.event.inputs.extra_report_args).resource_usage_report }}
          onlycacheableoutcome: ${{ fromJson(github.event.inputs.extra_report_args).only_cacheable_outcome }}
          thresholdtaskduration: ${{ fromJson(github.event.inputs.extra_report_args).threshold_task_duration }} 
          deploy_results: ${{ fromJson(github.event.inputs.extra_report_args).deploy_results }}
          open-ai-request: ${{ fromJson(github.event.inputs.extra_report_args).open_ai_request }}
          open-ai-api-key: ${{ secrets.OPEN_API_KEY }}
          deployment-key: ${{ secrets.GH_BUILD_DEPLOYMENT }}
          rl-agent-url: "https://rl-agent-428721187836.us-central1.run.app"
          send-feedback: "true"
          firebase-function-url: "https://us-central1-rlgradleld.cloudfunctions.net"
          rl-actions: "${{ github.event.inputs.rl_actions }}"
